from flask import Flask, request, jsonify
import mongocli, cross
import json, urlparse

from werkzeug.datastructures import ImmutableMultiDict

import pymongo
import json

app = Flask(__name__)

from datetime import timedelta
from flask import make_response, request, current_app
from functools import update_wrapper

def crossdomain(origin=None, methods=None, headers=None,
                max_age=21600, attach_to_all=True,
                automatic_options=True):
    if methods is not None:
        methods = ', '.join(sorted(x.upper() for x in methods))
    if headers is not None and not isinstance(headers, basestring):
        headers = ', '.join(x.upper() for x in headers)
    if not isinstance(origin, basestring):
        origin = ', '.join(origin)
    if isinstance(max_age, timedelta):
        max_age = max_age.total_seconds()

    def get_methods():
        if methods is not None:
            return methods

        options_resp = current_app.make_default_options_response()
        return options_resp.headers['allow']

    def decorator(f):
        def wrapped_function(*args, **kwargs):
            if automatic_options and request.method == 'OPTIONS':
                resp = current_app.make_default_options_response()
            else:
                resp = make_response(f(*args, **kwargs))
            if not attach_to_all and request.method != 'OPTIONS':
                return resp

            h = resp.headers

            h['Access-Control-Allow-Origin'] = origin
            h['Access-Control-Allow-Methods'] = get_methods()
            h['Access-Control-Max-Age'] = str(max_age)
            if headers is not None:
                h['Access-Control-Allow-Headers'] = headers
            return resp

        f.provide_automatic_options = False
        return update_wrapper(wrapped_function, f)
    return decorator



def pushsurvey(jsonstr):

  # open pool connection
  conn = pymongo.Connection()

  # create db
  db = conn.testdb

  # check and make sure that the date object does not break the thing
  '''jsonstr = '{"SurveyName":"blah", "Description":"this is not a survey", "Questions": [ { "ID":"1", "Content":"question1"}, { "ID":"2", "Content": "question2"}], "Creator":"Name", "Created On":"7/22/2008 12:11:04 PM", "Updated On":"7/22/2008 12:11:04 PM"}'''

  obj = json.loads(jsonstr)

  for i in list(db.test.find({"SurveyName":"blah"})):
    db.test.remove(i)

  db.test.insert(obj)

  for i in list(db.test.find({"SurveyName":"blah"})):
    print "QUESTION HERE\n\n"
    print i['Description']
    print "DONE\n\n"

@app.route('/')
def unknown():
  return "Well, this is embarrring. You don't follow instructions."

@app.route('/pushsurvey', methods=['POST'])
@crossdomain(origin='*')
def pushsurvey():
    #print request.data
    #print request.form
    #print json.dumps(request.form)
    d = json.loads(json.dumps(request.form))
    printd(d)
    #print imd['SurveyName']
    #mongocli.pushsurvey(json.dumps(request.form))
    #mongocli.pushsurvey(request.data)
    return 'crap'

def printd(d):
  print d['SurveyName']

if __name__ == '__main__':
  app.run(debug=True)
